{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pypalettes","text":"<p>A large (+2500) collection of color maps for Python.</p> <p></p> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Let's see how to use the <code>\"Sunset\"</code> palette:</p> Simple usageContinuous paletteReverse palette <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Sunset\")\n\nplt.imshow(\n  X=data,\n  cmap=cmap\n)\nplt.colorbar()\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Sunset\", cmap_type=\"continuous\")\n\nplt.imshow(\n  X=data,\n  cmap=cmap\n)\nplt.colorbar()\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Sunset\", reverse=True)\n\nplt.imshow(\n  X=data,\n  cmap=cmap\n)\nplt.colorbar()\n</code></pre> <p>The <code>\"Sunset\"</code> is just one of 2500+ available palettes from <code>pypalettes</code>.</p> <ul> <li>See all palettes</li> <li>More examples</li> </ul>"},{"location":"#installation","title":"Installation","text":"stabledev <pre><code>pip install pypalettes\n</code></pre> <pre><code>pip install git+https://github.com/JosephBARBIERDARNAL/pypalettes.git\n</code></pre>"},{"location":"examples/","title":"Example usage","text":"<p><code>pypalettes</code> offers 3 functions:</p> <ul> <li><code>load_cmap()</code>: the core function that loads a colormap from one of the 2500+ available palettes. All available palettes can be found in the Color Palette Finder.</li> <li><code>create_cmap()</code>: a function to create your own colormaps from a list of colors.</li> <li><code>show_cmap()</code>: a function to preview the colors of a given palette.</li> </ul> <p>Since those functions are built for matplotlib, they work with any matplotlib-based plotting library (seaborn, plotnine, (geo)pandas, cartopy, statsmodels, etc).</p> <p>Also, you have to understand the difference between a palette and a colormap (or cmap).</p> <ul> <li>palette: a list of colors, such as   [\"#D57A6D\",   \"#E8B762\",   \"#9CCDDF\",   \"#525052\"]. It's not necessarly related to data visualization, but design in general.</li> <li>colormap: in the context of <code>matplotlib</code>, this a special object that contains colors and can be used to map colors and values.</li> </ul> <p>Let's see how to use them in concrete examples!</p>"},{"location":"examples/#load_cmap","title":"<code>load_cmap()</code>","text":"<ul> <li>In matplotlib</li> </ul> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pypalettes import load_cmap\n\ncmap = load_cmap(\"Acadia\")\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ny = [2, 1, 4, 3, 5, 7, 6, 9, 8]\nc = [1, 3, 1, 2, 3, 2, 1, 3, 2]\n\nfig, ax = plt.subplots()\nax.scatter(x, y, c=c, s=500, cmap=cmap)\n</code></pre> <ul> <li>In seaborn</li> </ul> <pre><code># mkdocs: render\nimport seaborn as sns\nfrom pypalettes import load_cmap\n\ncmap = load_cmap(\"Fun\")\npalette = cmap.colors # list of colors\n\ndf = sns.load_dataset(\"penguins\")\n\ng = sns.lmplot(\n    data=df,\n    x=\"bill_length_mm\",\n    y=\"bill_depth_mm\",\n    hue=\"species\",\n    palette=palette,\n)\n</code></pre> <ul> <li>In plotnine</li> </ul> <pre><code># mkdocs: render\nimport pandas as pd\nfrom plotnine import ggplot, aes, geom_bar, theme_minimal, scale_fill_gradientn\nfrom pypalettes import load_cmap\n\ndf = pd.DataFrame({\n    \"category\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    \"value\": [10, 15, 7, 12, 20]\n})\n\ncolors = load_cmap(\"Arches2\", reverse=True).colors\n\n(\n    ggplot(df, aes(x=\"category\", y=\"value\", fill=\"value\"))\n    + geom_bar(stat=\"identity\")\n    + scale_fill_gradientn(colors=colors)\n    + theme_minimal()\n)\n</code></pre>"},{"location":"examples/#create_cmap","title":"<code>create_cmap()</code>","text":"<p>This function just requires a list of colors, and then you can use its output the same way as <code>load_cmap()</code>:</p> <ul> <li>Create a categorical colormap</li> </ul> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pypalettes import create_cmap\nimport numpy as np\n\ncmap = create_cmap([\"#D57A6D\", \"#E8B762\", \"#9CCDDF\", \"#525052\"])\n\nx = np.linspace(0, 20, 1000)\ny = np.sin(x)\n\nplt.scatter(x, y, c=y, cmap=cmap)\nplt.colorbar()\n</code></pre> <p></p> <ul> <li>Create a continuous colormap</li> </ul> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pypalettes import create_cmap\nimport numpy as np\n\ncmap = create_cmap(\n    [\"#D57A6D\", \"#E8B762\", \"#9CCDDF\", \"#525052\"],\n    cmap_type=\"continuous\",\n)\n\nx = np.linspace(0, 20, 1000)\ny = np.sin(x)\n\nplt.scatter(x, y, c=y, cmap=cmap)\nplt.colorbar()\n</code></pre>"},{"location":"examples/#show_cmap","title":"<code>show_cmap()</code>","text":"<p>Finally, the utility function to preview the colors from a colormap.</p> <pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"Fun\")\n</code></pre> <pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"FridaKahlo\")\n</code></pre> <pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"Sunset2\")\n</code></pre>"},{"location":"reference/create_cmap/","title":"Create cmap","text":""},{"location":"reference/create_cmap/#pypalettes.create_cmap","title":"<code>pypalettes.create_cmap</code>","text":""},{"location":"reference/create_cmap/#pypalettes.create_cmap.create_cmap","title":"<code>create_cmap(colors, cmap_type='discrete', name='custom_cmap')</code>","text":"<p>Create a matplotlib colormap from an iterable of colors.</p> <p>Parameters:</p> Name Type Description Default <code>colors</code> <code>List</code> <p>An iterable of valid matplotlib colors. More about valid colors: https://python-graph-gallery.com/python-colors/</p> required <code>name</code> <code>str</code> <p>A name for the palette</p> <code>'custom_cmap'</code> <code>cmap_type</code> <code>str</code> <p>Type of colormap: 'continuous' or 'discrete'</p> <code>'discrete'</code>"},{"location":"reference/create_cmap/#examples","title":"Examples","text":"<ul> <li>Create a categorical colormap</li> </ul> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pypalettes import create_cmap\nimport numpy as np\n\ncmap = create_cmap([\"#D57A6D\", \"#E8B762\", \"#9CCDDF\", \"#525052\"])\n\nx = np.linspace(0, 20, 1000)\ny = np.sin(x)\n\nplt.scatter(x, y, c=y, cmap=cmap)\nplt.colorbar()\n</code></pre> <ul> <li>Create a continuous colormap</li> </ul> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nfrom pypalettes import create_cmap\nimport numpy as np\n\ncmap = create_cmap(\n    [\"#D57A6D\", \"#E8B762\", \"#9CCDDF\", \"#525052\"],\n    cmap_type=\"continuous\",\n)\n\nx = np.linspace(0, 20, 1000)\ny = np.sin(x)\n\nplt.scatter(x, y, c=y, cmap=cmap)\nplt.colorbar()\n</code></pre>"},{"location":"reference/load_cmap/","title":"Load cmap","text":""},{"location":"reference/load_cmap/#pypalettes.load_cmap","title":"<code>pypalettes.load_cmap</code>","text":""},{"location":"reference/load_cmap/#pypalettes.load_cmap.load_cmap","title":"<code>load_cmap(name='random', cmap_type='discrete', reverse=False, keep_first_n=None, keep_last_n=None, keep=None, repeat=1, shuffle=False)</code>","text":"<p>Load a matplotlib colormap from one of the 2500+ available palettes.</p> <p>You can find all valid palette names here</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Union[str, List[str]]</code> <p>Name of the palette</p> <code>'random'</code> <code>cmap_type</code> <code>str</code> <p>Type of colormap: 'continuous' or 'discrete'</p> <code>'discrete'</code> <code>reverse</code> <code>bool</code> <p>Whether to reverse the order of the colors or not</p> <code>False</code> <code>keep_first_n</code> <code>Optional[int]</code> <p>Keep only the first n colors of the palette</p> <code>None</code> <code>keep</code> <code>Optional[List[bool]]</code> <p>Specify which colors to keep in the palette</p> <code>None</code> <code>repeat</code> <code>int</code> <p>The number of times the palette must be present in the output. Used to access larger palettes that are repeated.</p> <code>1</code> <code>shuffle</code> <code>Union[bool, int]</code> <p>Used to mix the order of colors. If an integer is supplied, it will be used as the seed.</p> <code>False</code>"},{"location":"reference/load_cmap/#examples","title":"Examples","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Sunset\", cmap_type=\"continuous\")\n\nplt.imshow(\n   X=data,\n   cmap=cmap\n)\nplt.colorbar()\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Acadia\", cmap_type=\"continuous\")\n\nplt.imshow(\n   X=data,\n   cmap=cmap\n)\nplt.colorbar()\n</code></pre> <pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pypalettes import load_cmap\n\nnp.random.seed(0)\ndata = np.random.randn(20, 20)\n\ncmap = load_cmap(\"Acanthurus_olivaceus\", cmap_type=\"continuous\")\n\nplt.imshow(\n   X=data,\n   cmap=cmap\n)\nplt.colorbar()\n</code></pre> <p>See all palettes</p>"},{"location":"reference/show_cmap/","title":"Show cmap","text":""},{"location":"reference/show_cmap/#pypalettes.show_cmap","title":"<code>pypalettes.show_cmap</code>","text":""},{"location":"reference/show_cmap/#pypalettes.show_cmap.show_cmap","title":"<code>show_cmap(*args, max_cols=8, spacing=0.1, square_size=1)</code>","text":"<p>Show the colors from a colormap as a grid of colored squares.</p> <p>Displays the colormap with one square per color, left-aligned, with a maximum number of columns per row. Automatically adjusts layout based on the number of colors.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Arguments to pass to <code>load_cmap</code> to load the desired colormap.</p> <code>()</code> <code>max_cols</code> <code>int</code> <p>Maximum number of color squares per row.</p> <code>8</code> <code>spacing</code> <code>float</code> <p>Spacing between squares.</p> <code>0.1</code> <code>square_size</code> <code>float</code> <p>Size of each square.</p> <code>1</code> <p>Returns:</p> Type Description <code>Figure</code> <p>matplotlib.figure.Figure: The figure object containing the colormap visualization.</p>"},{"location":"reference/show_cmap/#examples","title":"Examples","text":"<pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"Fun\")\n</code></pre> <pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"Acadia\")\n</code></pre> <pre><code># mkdocs: render\nfrom pypalettes import show_cmap\n\nshow_cmap(\"Sunset\")\n</code></pre>"}]}